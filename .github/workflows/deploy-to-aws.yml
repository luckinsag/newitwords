name: Deploy to AWS EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  JAVA_VERSION: '17'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'code-and-project-files/package-lock.json'

    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Copy project files to build directories
      run: |
        # Create build directories
        mkdir -p build/frontend-app
        mkdir -p build/backend-api
        
        # Copy frontend files
        cp code-and-project-files/package.json build/frontend-app/
        cp code-and-project-files/package-lock.json build/frontend-app/
        cp code-and-project-files/vite.config.js build/frontend-app/
        cp code-and-project-files/index.html build/frontend-app/
        cp -r project-structure/frontend-app/src build/frontend-app/
        cp -r project-structure/frontend-app/public build/frontend-app/
        # Override with main app files
        cp code-and-project-files/App.vue build/frontend-app/src/
        cp code-and-project-files/main.js build/frontend-app/src/
        
        # Copy backend files
        cp code-and-project-files/pom.xml build/backend-api/
        cp code-and-project-files/mvnw build/backend-api/
        cp code-and-project-files/mvnw.cmd build/backend-api/
        cp -r project-structure/backend-api/src build/backend-api/
        cp -r project-structure/backend-api/.mvn build/backend-api/
        
    - name: Build Frontend
      run: |
        cd build/frontend-app
        npm ci
        npm run build
        
    - name: Build Backend
      run: |
        cd build/backend-api
        chmod +x mvnw
        ./mvnw clean package -DskipTests

    - name: Create deployment package
      run: |
        mkdir -p deploy
        
        # Copy frontend build
        cp -r build/frontend-app/dist deploy/frontend
        
        # Copy backend JAR
        cp build/backend-api/target/*.jar deploy/backend.jar
        
        # Copy deployment scripts
        cp scripts-and-configs/database-setup.sql deploy/
        cp scripts-and-configs/nginx.conf deploy/
        cp scripts-and-configs/docker-compose.yml deploy/
        cp scripts-and-configs/production.properties deploy/
        
        # Create deployment script
        cat > deploy/deploy.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting deployment..."
        
        # Update system
        sudo yum update -y
        
        # Install Docker if not exists
        if ! command -v docker &> /dev/null; then
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -a -G docker ec2-user
        fi
        
        # Install Docker Compose if not exists
        if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # Install Java 17 if not exists
        if ! command -v java &> /dev/null; then
            sudo yum install -y java-17-amazon-corretto-headless
        fi
        
        # Install MySQL if not exists
        if ! command -v mysql &> /dev/null; then
            sudo yum install -y mysql mysql-server
            sudo systemctl start mysqld
            sudo systemctl enable mysqld
        fi
        
        # Setup application directory
        sudo mkdir -p /opt/itwords
        sudo chown ec2-user:ec2-user /opt/itwords
        
        # Copy files
        cp backend.jar /opt/itwords/
        cp -r frontend /opt/itwords/
        cp database-setup.sql /opt/itwords/
        cp nginx.conf /opt/itwords/
        cp docker-compose.yml /opt/itwords/
        cp production.properties /opt/itwords/application.properties
        
        # Setup database
        if ! mysql -u root -e "USE mysql_itwordslearning;" 2>/dev/null; then
            echo "Setting up database..."
            mysql -u root < database-setup.sql
        fi
        
        # Stop existing services
        sudo pkill -f "backend.jar" || true
        sudo systemctl stop nginx || true
        
        # Install and configure Nginx
        if ! command -v nginx &> /dev/null; then
            sudo yum install -y nginx
        fi
        sudo cp nginx.conf /etc/nginx/nginx.conf
        sudo systemctl start nginx
        sudo systemctl enable nginx
        
        # Start backend service
        cd /opt/itwords
        nohup java -jar backend.jar --spring.config.location=application.properties > app.log 2>&1 &
        
        echo "‚úÖ Deployment completed successfully!"
        echo "Frontend: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)"
        echo "Backend API: http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):8080"
        EOF
        
        chmod +x deploy/deploy.sh
        
        # Create archive
        tar -czf deployment.tar.gz -C deploy .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Upload to S3
      run: |
        aws s3 cp deployment.tar.gz s3://${{ secrets.S3_BUCKET }}/deployments/deployment-$(date +%Y%m%d-%H%M%S).tar.gz
        aws s3 cp deployment.tar.gz s3://${{ secrets.S3_BUCKET }}/deployments/latest.tar.gz

    - name: Deploy to EC2
      run: |
        # Create temporary key file
        echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2-key.pem
        chmod 600 ec2-key.pem
        
        # Deploy to EC2
        ssh -i ec2-key.pem -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << 'EOF'
          # Download latest deployment
          aws s3 cp s3://${{ secrets.S3_BUCKET }}/deployments/latest.tar.gz /tmp/
          
          # Extract and deploy
          cd /tmp
          tar -xzf latest.tar.gz
          chmod +x deploy.sh
          ./deploy.sh
          
          # Cleanup
          rm -rf /tmp/latest.tar.gz /tmp/deploy.sh /tmp/frontend /tmp/backend.jar /tmp/*.sql /tmp/*.conf /tmp/*.yml /tmp/*.properties
        EOF
        
        # Cleanup
        rm -f ec2-key.pem

    - name: Health Check
      run: |
        echo "üîç Performing health check..."
        sleep 30
        
        # Check if backend is running
        if curl -f http://${{ secrets.EC2_HOST }}:8080/actuator/health 2>/dev/null; then
          echo "‚úÖ Backend health check passed"
        else
          echo "‚ùå Backend health check failed"
          exit 1
        fi
        
        # Check if frontend is accessible
        if curl -f http://${{ secrets.EC2_HOST }} 2>/dev/null; then
          echo "‚úÖ Frontend health check passed"
        else
          echo "‚ùå Frontend health check failed"
          exit 1
        fi

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Frontend: http://${{ secrets.EC2_HOST }}"
          echo "Backend API: http://${{ secrets.EC2_HOST }}:8080"
        else
          echo "üí• Deployment failed!"
        fi

  cleanup:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    
    steps:
    - name: Cleanup old deployments
      run: |
        # Configure AWS
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws configure set default.region ${{ secrets.AWS_REGION }}
        
        # Keep only last 5 deployments
        aws s3 ls s3://${{ secrets.S3_BUCKET }}/deployments/ | sort | head -n -5 | awk '{print $4}' | while read file; do
          if [[ "$file" != "latest.tar.gz" ]]; then
            aws s3 rm s3://${{ secrets.S3_BUCKET }}/deployments/$file
          fi
        done 